// Code generated by MockGen. DO NOT EDIT.
// Source: x-men/app/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetDNA mocks base method.
func (m *MockRepository) GetDNA(arg0 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNA", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNA indicates an expected call of GetDNA.
func (mr *MockRepositoryMockRecorder) GetDNA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNA", reflect.TypeOf((*MockRepository)(nil).GetDNA), arg0)
}

// GetStatistic mocks base method.
func (m *MockRepository) GetStatistic() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockRepositoryMockRecorder) GetStatistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockRepository)(nil).GetStatistic))
}

// SaveDNA mocks base method.
func (m *MockRepository) SaveDNA(arg0 []string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDNA", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDNA indicates an expected call of SaveDNA.
func (mr *MockRepositoryMockRecorder) SaveDNA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDNA", reflect.TypeOf((*MockRepository)(nil).SaveDNA), arg0, arg1)
}
