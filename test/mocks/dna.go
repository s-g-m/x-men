// Code generated by MockGen. DO NOT EDIT.
// Source: x-men/app/modules/dna (interfaces: Controller,Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dna "x-men/app/modules/dna"

	gomock "github.com/golang/mock/gomock"
)

// MockDnaController is a mock of Controller interface.
type MockDnaController struct {
	ctrl     *gomock.Controller
	recorder *MockDnaControllerMockRecorder
}

// MockDnaControllerMockRecorder is the mock recorder for MockDnaController.
type MockDnaControllerMockRecorder struct {
	mock *MockDnaController
}

// NewMockDnaController creates a new mock instance.
func NewMockDnaController(ctrl *gomock.Controller) *MockDnaController {
	mock := &MockDnaController{ctrl: ctrl}
	mock.recorder = &MockDnaControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDnaController) EXPECT() *MockDnaControllerMockRecorder {
	return m.recorder
}

// IsMutant mocks base method.
func (m *MockDnaController) IsMutant(arg0 dna.HttpAdapter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsMutant", arg0)
}

// IsMutant indicates an expected call of IsMutant.
func (mr *MockDnaControllerMockRecorder) IsMutant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMutant", reflect.TypeOf((*MockDnaController)(nil).IsMutant), arg0)
}

// MockDnaService is a mock of Service interface.
type MockDnaService struct {
	ctrl     *gomock.Controller
	recorder *MockDnaServiceMockRecorder
}

// MockDnaServiceMockRecorder is the mock recorder for MockDnaService.
type MockDnaServiceMockRecorder struct {
	mock *MockDnaService
}

// NewMockDnaService creates a new mock instance.
func NewMockDnaService(ctrl *gomock.Controller) *MockDnaService {
	mock := &MockDnaService{ctrl: ctrl}
	mock.recorder = &MockDnaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDnaService) EXPECT() *MockDnaServiceMockRecorder {
	return m.recorder
}

// IsMutant mocks base method.
func (m *MockDnaService) IsMutant(arg0 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMutant", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMutant indicates an expected call of IsMutant.
func (mr *MockDnaServiceMockRecorder) IsMutant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMutant", reflect.TypeOf((*MockDnaService)(nil).IsMutant), arg0)
}
